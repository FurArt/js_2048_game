{"version":3,"sources":["scripts/game.js"],"names":["Game","scoreTotal","rows","document","querySelectorAll","gameScoreElement","querySelector","fieldCells","startMessage","loseMessage","winMessage","startButton","restartButton","Array","from","every","cell","textContent","resetCells","addNewNumber","updateBoard","mergedValue","parseInt","cells","Math","floor","random","length","emptyCells","findEmptyCells","randomNumCells","generateRandomNumber","forEach","filter","clearCellClass","i","j","currentCell","getCellAtPosition","row","col","className","value","classList","add","randomEmptyCell","newValue","updateCellClass","canMove","remove","checkFor2048","isChanged","nonEmptyCells","removeEmptyCells","nextCell","updateScored","generateRandomCell","prevCell","columnCells","push","k","window"],"mappings":"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","file":"game.088b0214.js","sourceRoot":"..\\src","sourcesContent":["'use strict';\n\nclass Game {\n  constructor() {\n    this.scoreTotal = 0;\n    this.rows = document.querySelectorAll('.field-row');\n    this.gameScoreElement = document.querySelector('.game-score');\n    this.fieldCells = document.querySelectorAll('.field-cell');\n    this.startMessage = document.querySelector('.message-start');\n    this.loseMessage = document.querySelector('.message-lose');\n    this.winMessage = document.querySelector('.message-win');\n    this.startButton = document.querySelector('.button.start');\n    this.restartButton = document.querySelector('.button.restart');\n  }\n\n  isBoardEmpty() {\n    return Array.from(this.fieldCells).every(cell => !cell.textContent);\n  }\n\n  initializeBoard() {\n    this.resetCells(this.fieldCells);\n    this.addNewNumber();\n    this.updateBoard();\n  }\n\n  updateScored(mergedValue) {\n    this.scoreTotal += parseInt(mergedValue, 10);\n    this.gameScoreElement.textContent = this.scoreTotal;\n  }\n\n  randomNumCells(cells) {\n    return Math.floor(Math.random() * cells.length);\n  }\n\n  addNewNumber() {\n    const emptyCells = this.findEmptyCells();\n\n    if (emptyCells.length > 0) {\n      const randomEmptyCell = emptyCells[this.randomNumCells(emptyCells)];\n\n      randomEmptyCell.textContent = this.generateRandomNumber();\n    }\n  }\n\n  updateBoard() {\n    this.fieldCells.forEach(cell => {\n      cell.textContent = cell.textContent === '0' ? '' : cell.textContent;\n    });\n    this.gameScoreElement.textContent = this.scoreTotal;\n  }\n\n  findEmptyCells() {\n    return Array.from(this.fieldCells).filter(cell => !cell.textContent);\n  }\n\n  resetCells(cells) {\n    cells.forEach(cell => {\n      cell.textContent = '';\n      this.clearCellClass(cell);\n    });\n    this.gameScoreElement.textContent = 0;\n  }\n\n  canMove() {\n    for (let i = 0; i < 4; i++) {\n      for (let j = 0; j < 4; j++) {\n        const currentCell = this.getCellAtPosition(i, j);\n\n        if (j < 3 && currentCell.textContent === this.getCellAtPosition(i, j + 1).textContent) {\n          return true;\n        }\n\n        if (i < 3 && currentCell.textContent === this.getCellAtPosition(i + 1, j).textContent) {\n          return true;\n        }\n      }\n    }\n\n    return this.findEmptyCells().length > 0;\n  }\n\n  generateRandomNumber() {\n    return Math.random() < 0.9 ? '2' : '4';\n  }\n\n  getCellAtPosition(row, col) {\n    return document.querySelector(`.field-row:nth-child(${row + 1}) .field-cell:nth-child(${col + 1})`);\n  }\n\n  clearCellClass(cell) {\n    cell.className = 'field-cell';\n  }\n\n  updateCellClass(cell, value) {\n    this.clearCellClass(cell);\n    cell.classList.add(`field-cell--${value}`);\n  }\n\n  removeEmptyCells(cells) {\n    return cells.filter(cell => cell.textContent !== '');\n  }\n\n  generateRandomCell() {\n    const emptyCells = Array.from(this.fieldCells)\n      .filter(cell => !cell.textContent);\n\n    if (emptyCells.length > 0) {\n      const randomEmptyCell = emptyCells[this.randomNumCells(emptyCells)];\n      const newValue = this.generateRandomNumber();\n\n      randomEmptyCell.textContent = newValue;\n      this.updateCellClass(randomEmptyCell, newValue);\n    }\n  }\n\n  checkFor2048() {\n    for (let i = 0; i < 4; i++) {\n      for (let j = 0; j < 4; j++) {\n        const cell = this.getCellAtPosition(i, j);\n\n        if (cell.textContent === '2048') {\n          return true;\n        }\n      }\n    }\n\n    return false;\n}\n\n  handleMessages() {\n    if (!this.canMove()) {\n      this.loseMessage.classList.remove('hidden');\n    } else {\n      this.startMessage.classList.add('hidden');\n    }\n\n    if (this.checkFor2048()) {\n      this.winMessage.classList.remove('hidden');\n    } else {\n      this.winMessage.classList.add('hidden');\n    }\n  }\n\n  moveCellsLeft() {\n    let isChanged = false;\n\n    this.rows.forEach(row => {\n      const cells = Array.from(row.querySelectorAll('.field-cell'));\n      const nonEmptyCells = this.removeEmptyCells(cells);\n\n      for (let i = 0; i < nonEmptyCells.length - 1; i++) {\n        const currentCell = nonEmptyCells[i];\n        const nextCell = nonEmptyCells[i + 1];\n\n        if (currentCell.textContent === nextCell.textContent && currentCell.textContent !== '') {\n          const mergedValue = parseInt(currentCell.textContent) * 2;\n\n          currentCell.textContent = mergedValue;\n          nextCell.textContent = '';\n          isChanged = true;\n          this.updateCellClass(currentCell, mergedValue);\n\n          this.updateScored(mergedValue);\n          break;\n        }\n      }\n\n      let j = 0;\n\n      for (let i = 0; i < nonEmptyCells.length; i++) {\n        if (nonEmptyCells[i].textContent !== '') {\n          if (cells[j].textContent !== nonEmptyCells[i].textContent) {\n            cells[j].textContent = nonEmptyCells[i].textContent;\n            this.updateCellClass(cells[j], nonEmptyCells[i].textContent);\n\n            isChanged = true;\n          }\n          j++;\n        }\n      }\n\n      for (let i = j; i < cells.length; i++) {\n        cells[i].textContent = '';\n        this.clearCellClass(cells[i]);\n      }\n    });\n\n    if (isChanged) {\n      this.generateRandomCell();\n    }\n  }\n\n  moveCellsRight() {\n    let isChanged = false;\n\n    this.rows.forEach(row => {\n      const cells = Array.from(row.querySelectorAll('.field-cell'));\n      const nonEmptyCells = this.removeEmptyCells(cells);\n\n      for (let i = nonEmptyCells.length - 1; i > 0; i--) {\n        const currentCell = nonEmptyCells[i];\n        const prevCell = nonEmptyCells[i - 1];\n\n        if (currentCell.textContent === prevCell.textContent\n          && currentCell.textContent !== '') {\n          const mergedValue = parseInt(currentCell.textContent) * 2;\n\n          currentCell.textContent = mergedValue;\n          prevCell.textContent = '';\n          isChanged = true;\n          this.updateScored(mergedValue);\n          this.updateCellClass(currentCell, mergedValue);\n          break;\n        }\n      }\n\n      let j = cells.length - 1;\n\n      for (let i = nonEmptyCells.length - 1; i >= 0; i--) {\n        if (nonEmptyCells[i].textContent !== '') {\n          if (cells[j].textContent !== nonEmptyCells[i].textContent) {\n            cells[j].textContent = nonEmptyCells[i].textContent;\n            this.updateCellClass(cells[j], nonEmptyCells[i].textContent);\n\n            isChanged = true;\n          }\n          j--;\n        }\n      }\n\n      for (let i = j; i >= 0; i--) {\n        cells[i].textContent = '';\n        this.clearCellClass(cells[i]);\n\n        if (cells[i].textContent !== '') {\n          isChanged = true;\n        }\n      }\n    });\n\n    if (isChanged) {\n      this.generateRandomCell();\n    }\n  }\n\n  moveCellsUp() {\n    let isChanged = false;\n\n    for (let j = 0; j < 4; j++) {\n      const columnCells = [];\n\n      for (let i = 0; i < 4; i++) {\n        columnCells.push(this.rows[i].querySelectorAll('.field-cell')[j]);\n      }\n\n      const nonEmptyCells = this.removeEmptyCells(columnCells);\n\n      for (let i = 0; i < nonEmptyCells.length - 1; i++) {\n        const currentCell = nonEmptyCells[i];\n        const nextCell = nonEmptyCells[i + 1];\n\n        if (currentCell.textContent === nextCell.textContent\n          && currentCell.textContent !== '') {\n          const mergedValue = parseInt(currentCell.textContent) * 2;\n\n          currentCell.textContent = mergedValue;\n          nextCell.textContent = '';\n\n          this.updateCellClass(currentCell, mergedValue);\n          this.updateScored(mergedValue);\n          isChanged = true;\n\n          break;\n        }\n      }\n\n      let k = 0;\n\n      for (let i = 0; i < nonEmptyCells.length; i++) {\n        if (nonEmptyCells[i].textContent !== '') {\n          if (columnCells[k].textContent !== nonEmptyCells[i].textContent) {\n            columnCells[k].textContent = nonEmptyCells[i].textContent;\n            this.updateCellClass(columnCells[k], nonEmptyCells[i].textContent);\n            isChanged = true;\n          }\n          k++;\n        }\n      }\n\n      for (let i = k; i < 4; i++) {\n        columnCells[i].textContent = '';\n        this.clearCellClass(columnCells[i]);\n\n        if (columnCells[i].textContent !== '') {\n          isChanged = true;\n        }\n      }\n    }\n\n    if (isChanged) {\n      this.generateRandomCell();\n    }\n  }\n\n  moveCellsDown() {\n    let isChanged = false;\n\n    for (let j = 0; j < 4; j++) {\n      const columnCells = [];\n\n      for (let i = 3; i >= 0; i--) {\n        columnCells.push(this.rows[i].querySelectorAll('.field-cell')[j]);\n      }\n\n      const nonEmptyCells = this.removeEmptyCells(columnCells);\n\n      for (let i = nonEmptyCells.length - 1; i > 0; i--) {\n        const currentCell = nonEmptyCells[i];\n        const prevCell = nonEmptyCells[i - 1];\n\n        if (currentCell.textContent === prevCell.textContent\n          && currentCell.textContent !== '') {\n          const mergedValue = parseInt(currentCell.textContent) * 2;\n\n          currentCell.textContent = mergedValue;\n          prevCell.textContent = '';\n\n          this.updateCellClass(currentCell, mergedValue);\n          this.updateScored(mergedValue);\n          isChanged = true;\n\n          break;\n        }\n      }\n\n      let k = 0;\n\n      for (let i = 0; i < nonEmptyCells.length; i++) {\n        if (nonEmptyCells[i].textContent !== '') {\n          if (columnCells[k].textContent !== nonEmptyCells[i].textContent) {\n            columnCells[k].textContent = nonEmptyCells[i].textContent;\n            this.updateCellClass(columnCells[k], nonEmptyCells[i].textContent);\n            isChanged = true;\n          }\n          k++;\n        }\n      }\n\n      for (let i = k; i < 4; i++) {\n        if (columnCells[i].textContent !== '') {\n          columnCells[i].textContent = '';\n          isChanged = true;\n          this.clearCellClass(columnCells[i]);\n        }\n      }\n    }\n\n    if (isChanged) {\n      this.generateRandomCell();\n    }\n  }\n}\n\nwindow.Game = Game;\n"]}